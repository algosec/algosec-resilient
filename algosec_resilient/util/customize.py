# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for algosec_resilient"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the algosec_resilient package"""
    reload_params = {"package": u"algosec_resilient",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"algosec_hostname"], 
                    "datatables": [u"algosec_isolation_requests"], 
                    "message_destinations": [u"algosec"], 
                    "functions": [u"algosec_isolate_host_from_network"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_algosec_isolate_host_from_network"], 
                    "actions": [u"Example: AlgoSec: Isolate Host From Network"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     algosec_hostname
    #   DataTables:
    #     algosec_isolation_requests
    #   Message Destinations:
    #     algosec
    #   Functions:
    #     algosec_isolate_host_from_network
    #   Workflows:
    #     example_algosec_isolate_host_from_network
    #   Rules:
    #     Example: AlgoSec: Isolate Host From Network


    yield ImportDefinition(u"""
eyJzZXJ2ZXJfdmVyc2lvbiI6IHsibWFqb3IiOiAzMSwgIm1pbm9yIjogMCwgImJ1aWxkX251bWJl
ciI6IDQyNTQsICJ2ZXJzaW9uIjogIjMxLjAuNDI1NCJ9LCAiZXhwb3J0X2Zvcm1hdF92ZXJzaW9u
IjogMiwgImlkIjogNjQsICJleHBvcnRfZGF0ZSI6IDE1NDI3NjIxNDAwMDgsICJmaWVsZHMiOiBb
eyJpZCI6IDUyOTAsICJuYW1lIjogImluY190cmFpbmluZyIsICJ0ZXh0IjogIlNpbXVsYXRpb24i
LCAicHJlZml4IjogbnVsbCwgInR5cGVfaWQiOiAwLCAidG9vbHRpcCI6ICJXaGV0aGVyIHRoZSBp
bmNpZGVudCBpcyBhIHNpbXVsYXRpb24gb3IgYSByZWd1bGFyIGluY2lkZW50LiAgVGhpcyBmaWVs
ZCBpcyByZWFkLW9ubHkuIiwgImlucHV0X3R5cGUiOiAiYm9vbGVhbiIsICJoaWRlX25vdGlmaWNh
dGlvbiI6IGZhbHNlLCAiY2hvc2VuIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIi
OiBmYWxzZSwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAiaW50ZXJuYWwiOiBmYWxzZSwgInV1aWQi
OiAiYzNmMGUzZWQtMjFlMS00ZDUzLWFmZmItZmU1Y2EzMzA4Y2NhIiwgIm9wZXJhdGlvbnMiOiBb
XSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidmFsdWVzIjogW10sICJyZWFkX29ubHkiOiB0cnVl
LCAiY2hhbmdlYWJsZSI6IHRydWUsICJyaWNoX3RleHQiOiBmYWxzZSwgImV4cG9ydF9rZXkiOiAi
aW5jaWRlbnQvaW5jX3RyYWluaW5nIiwgInRlbXBsYXRlcyI6IFtdLCAiZGVwcmVjYXRlZCI6IGZh
bHNlfSwgeyJpZCI6IDU3NzMsICJuYW1lIjogImFsZ29zZWNfaG9zdG5hbWUiLCAidGV4dCI6ICJh
bGdvc2VjX2hvc3RuYW1lIiwgInByZWZpeCI6IG51bGwsICJ0eXBlX2lkIjogMTEsICJ0b29sdGlw
IjogIlRoZSBob3N0bmFtZSB1c2VkIHRvIGNhcnJ5IG9wZXJhdGlvbnMgd2l0aCB0aGUgQWxnb1Nl
YyBzZXJ2ZXIiLCAicGxhY2Vob2xkZXIiOiAiSG9zdG5hbWUgKGUuZyAxMC4wLjAuMTIpIiwgImlu
cHV0X3R5cGUiOiAidGV4dCIsICJyZXF1aXJlZCI6ICJhbHdheXMiLCAiaGlkZV9ub3RpZmljYXRp
b24iOiBmYWxzZSwgImNob3NlbiI6IGZhbHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjog
ZmFsc2UsICJibGFua19vcHRpb24iOiBmYWxzZSwgImludGVybmFsIjogZmFsc2UsICJ1dWlkIjog
ImZkOWIzNjUwLWY3OWYtNDg2Mi04ZjBkLWEzZGZlY2ExNjYwZiIsICJvcGVyYXRpb25zIjogW10s
ICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInZhbHVlcyI6IFtdLCAicmVhZF9vbmx5IjogZmFsc2Us
ICJjaGFuZ2VhYmxlIjogdHJ1ZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAiZXhwb3J0X2tleSI6ICJf
X2Z1bmN0aW9uL2FsZ29zZWNfaG9zdG5hbWUiLCAidGVtcGxhdGVzIjogW10sICJkZXByZWNhdGVk
IjogZmFsc2V9XSwgImluY2lkZW50X3R5cGVzIjogW3sidXBkYXRlX2RhdGUiOiAxNTQyNzYyNTEz
ODAzLCAiY3JlYXRlX2RhdGUiOiAxNTQyNzYyNTEzODAzLCAidXVpZCI6ICJiZmVlYzJkNC0zNzcw
LTExZTgtYWQzOS00YTAwMDQwNDRhYTAiLCAiZGVzY3JpcHRpb24iOiAiQ3VzdG9taXphdGlvbiBQ
YWNrYWdlcyAoaW50ZXJuYWwpIiwgImV4cG9ydF9rZXkiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdl
cyAoaW50ZXJuYWwpIiwgIm5hbWUiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwp
IiwgImVuYWJsZWQiOiBmYWxzZSwgInN5c3RlbSI6IGZhbHNlLCAicGFyZW50X2lkIjogbnVsbCwg
ImhpZGRlbiI6IGZhbHNlLCAiaWQiOiAwfV0sICJwaGFzZXMiOiBbXSwgImF1dG9tYXRpY190YXNr
cyI6IFtdLCAib3ZlcnJpZGVzIjogW10sICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFt7Im5hbWUi
OiAiYWxnb3NlYyIsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJhbGdvc2VjIiwgImRlc3RpbmF0aW9u
X3R5cGUiOiAwLCAiZXhwZWN0X2FjayI6IHRydWUsICJ1c2VycyI6IFsiYWxtb2cuY29oZW5AYWxn
b3NlYy5jb20iXSwgInV1aWQiOiAiYjc5OWViMTYtNDUzZi00YmU4LWJmYTgtMmU1NDdlMWU3MmM0
IiwgImV4cG9ydF9rZXkiOiAiYWxnb3NlYyJ9XSwgImFjdGlvbnMiOiBbeyJpZCI6IDg1MywgIm5h
bWUiOiAiRXhhbXBsZTogQWxnb1NlYzogSXNvbGF0ZSBIb3N0IEZyb20gTmV0d29yayIsICJ0eXBl
IjogMSwgIm9iamVjdF90eXBlIjogImFydGlmYWN0IiwgImNvbmRpdGlvbnMiOiBbeyJtZXRob2Qi
OiAiZXF1YWxzIiwgImZpZWxkX25hbWUiOiAiYXJ0aWZhY3QudHlwZSIsICJ2YWx1ZSI6ICJJUCBB
ZGRyZXNzIiwgInR5cGUiOiBudWxsLCAiZXZhbHVhdGlvbl9pZCI6IG51bGx9XSwgImF1dG9tYXRp
b25zIjogW10sICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFtdLCAid29ya2Zsb3dzIjogWyJleGFt
cGxlX2FsZ29zZWNfaXNvbGF0ZV9ob3N0X2Zyb21fbmV0d29yayJdLCAidmlld19pdGVtcyI6IFtd
LCAidGltZW91dF9zZWNvbmRzIjogODY0MDAsICJ1dWlkIjogImM4ZTZiOTMzLWUzYTMtNGYxMi05
MTQ4LTczZjdhZjU1Njk3YSIsICJleHBvcnRfa2V5IjogIkV4YW1wbGU6IEFsZ29TZWM6IElzb2xh
dGUgSG9zdCBGcm9tIE5ldHdvcmsiLCAibG9naWNfdHlwZSI6ICJhbGwifV0sICJsYXlvdXRzIjog
W10sICJub3RpZmljYXRpb25zIjogbnVsbCwgInRpbWVmcmFtZXMiOiBudWxsLCAibG9jYWxlIjog
bnVsbCwgImluZHVzdHJpZXMiOiBudWxsLCAicmVndWxhdG9ycyI6IG51bGwsICJnZW9zIjogbnVs
bCwgInRhc2tfb3JkZXIiOiBbXSwgImFjdGlvbl9vcmRlciI6IFtdLCAidHlwZXMiOiBbeyJpZCI6
IG51bGwsICJ0eXBlX2lkIjogOCwgInR5cGVfbmFtZSI6ICJhbGdvc2VjX2lzb2xhdGlvbl9yZXF1
ZXN0cyIsICJmaWVsZHMiOiB7Imhvc3RuYW1lIjogeyJpZCI6IDU3NzUsICJuYW1lIjogImhvc3Ru
YW1lIiwgInRleHQiOiAiSG9zdG5hbWUiLCAicHJlZml4IjogbnVsbCwgInR5cGVfaWQiOiAxMDkx
LCAidG9vbHRpcCI6ICIiLCAicGxhY2Vob2xkZXIiOiAiIiwgImlucHV0X3R5cGUiOiAidGV4dCIs
ICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAiY2hvc2VuIjogZmFsc2UsICJkZWZhdWx0X2No
b3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAiaW50ZXJuYWwi
OiBmYWxzZSwgInV1aWQiOiAiOWZkY2JiYzUtOWQ1NS00MTVjLTk5YWMtNzhmNDcyOTVlZTQ1Iiwg
Im9wZXJhdGlvbnMiOiBbXSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidmFsdWVzIjogW10sICJy
ZWFkX29ubHkiOiBmYWxzZSwgImNoYW5nZWFibGUiOiB0cnVlLCAicmljaF90ZXh0IjogZmFsc2Us
ICJleHBvcnRfa2V5IjogImFsZ29zZWNfaXNvbGF0aW9uX3JlcXVlc3RzL2hvc3RuYW1lIiwgIm9y
ZGVyIjogMSwgIndpZHRoIjogMTIzLCAidGVtcGxhdGVzIjogW10sICJkZXByZWNhdGVkIjogZmFs
c2V9LCAiY2hhbmdlX3JlcXVlc3RfdXJsIjogeyJpZCI6IDU3NzYsICJuYW1lIjogImNoYW5nZV9y
ZXF1ZXN0X3VybCIsICJ0ZXh0IjogIkNoYW5nZSBSZXF1ZXN0IFVSTCIsICJwcmVmaXgiOiBudWxs
LCAidHlwZV9pZCI6IDEwOTEsICJ0b29sdGlwIjogIiIsICJwbGFjZWhvbGRlciI6ICIiLCAiaW5w
dXRfdHlwZSI6ICJ0ZXh0IiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJjaG9zZW4iOiBm
YWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAiYmxhbmtfb3B0aW9uIjog
ZmFsc2UsICJpbnRlcm5hbCI6IGZhbHNlLCAidXVpZCI6ICIzYWQ5MDJlYi03OWE1LTQ1ZDktYjgz
Ni01NmMwZTVjYWU3MDQiLCAib3BlcmF0aW9ucyI6IFtdLCAib3BlcmF0aW9uX3Blcm1zIjoge30s
ICJ2YWx1ZXMiOiBbXSwgInJlYWRfb25seSI6IGZhbHNlLCAiY2hhbmdlYWJsZSI6IHRydWUsICJy
aWNoX3RleHQiOiBmYWxzZSwgImV4cG9ydF9rZXkiOiAiYWxnb3NlY19pc29sYXRpb25fcmVxdWVz
dHMvY2hhbmdlX3JlcXVlc3RfdXJsIiwgIm9yZGVyIjogMiwgIndpZHRoIjogNDgwLCAidGVtcGxh
dGVzIjogW10sICJkZXByZWNhdGVkIjogZmFsc2V9LCAiaWQiOiB7ImlkIjogNTc3NCwgIm5hbWUi
OiAiaWQiLCAidGV4dCI6ICJJRCIsICJwcmVmaXgiOiBudWxsLCAidHlwZV9pZCI6IDEwOTEsICJ0
b29sdGlwIjogIiIsICJwbGFjZWhvbGRlciI6ICIiLCAiaW5wdXRfdHlwZSI6ICJudW1iZXIiLCAi
aGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgImNob3NlbiI6IGZhbHNlLCAiZGVmYXVsdF9jaG9z
ZW5fYnlfc2VydmVyIjogZmFsc2UsICJibGFua19vcHRpb24iOiBmYWxzZSwgImludGVybmFsIjog
ZmFsc2UsICJ1dWlkIjogImJlYWI2ZjgzLWFkNDYtNDUxMC04MDg3LTFjMzk3YmI3OTE2YiIsICJv
cGVyYXRpb25zIjogW10sICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInZhbHVlcyI6IFtdLCAicmVh
ZF9vbmx5IjogZmFsc2UsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAi
ZXhwb3J0X2tleSI6ICJhbGdvc2VjX2lzb2xhdGlvbl9yZXF1ZXN0cy9pZCIsICJvcmRlciI6IDAs
ICJ3aWR0aCI6IDkyLCAidGVtcGxhdGVzIjogW10sICJkZXByZWNhdGVkIjogZmFsc2V9fSwgInBy
b3BlcnRpZXMiOiB7ImNhbl9jcmVhdGUiOiBmYWxzZSwgImNhbl9kZXN0cm95IjogZmFsc2UsICJm
b3Jfd2hvIjogW119LCAicGFyZW50X3R5cGVzIjogWyJpbmNpZGVudCJdLCAiZGlzcGxheV9uYW1l
IjogIkFsZ29TZWMgSXNvbGF0aW9uIFJlcXVlc3RzIiwgImZvcl9ub3RpZmljYXRpb25zIjogZmFs
c2UsICJmb3JfYWN0aW9ucyI6IGZhbHNlLCAiZm9yX2N1c3RvbV9maWVsZHMiOiBmYWxzZSwgImV4
cG9ydF9rZXkiOiAiYWxnb3NlY19pc29sYXRpb25fcmVxdWVzdHMiLCAidXVpZCI6ICJkODJjMDFh
MC00N2JhLTQyZDUtODU2ZC0xMDY4Yzg1MzEzNGIiLCAiYWN0aW9ucyI6IFtdLCAic2NyaXB0cyI6
IFtdfV0sICJzY3JpcHRzIjogW10sICJpbmNpZGVudF9hcnRpZmFjdF90eXBlcyI6IFtdLCAid29y
a2Zsb3dzIjogW3sid29ya2Zsb3dfaWQiOiAyNzksICJuYW1lIjogIkV4YW1wbGU6IEFsZ29TZWM6
IElzb2xhdGUgSG9zdCBGcm9tIE5ldHdvcmsiLCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZXhhbXBs
ZV9hbGdvc2VjX2lzb2xhdGVfaG9zdF9mcm9tX25ldHdvcmsiLCAib2JqZWN0X3R5cGUiOiAiYXJ0
aWZhY3QiLCAiZGVzY3JpcHRpb24iOiAiQW4gZXhhbXBsZSB3b3JrZmxvdyBzaG93aW5nIGhvdyB0
byBpc29sYXRlIFwiSVAgQWRkcmVzc1wiIGFydGlmYWN0IHVzaW5nIEFsZ29TZWMgRmlyZUZsb3cu
IFRoZSBGaXJlRmxvdyBpc29sYXRpb24gcmVxdWVzdCBkZXRhaWxzIGFyZSB1cGRhdGVkIGluIHRo
ZSBpbmNpZGVudCdzIERhdGEgVGFibGUgY2FsbGVkIFwiQWxnb1NlYyBJc29sYXRpb24gUmVxdWVz
dHNcIiIsICJjcmVhdG9yX2lkIjogImFsbW9nLmNvaGVuQGFsZ29zZWMuY29tIiwgImxhc3RfbW9k
aWZpZWRfYnkiOiAiYWxtb2cuY29oZW5AYWxnb3NlYy5jb20iLCAibGFzdF9tb2RpZmllZF90aW1l
IjogMTU0Mjc2MTk2NTYzMCwgImV4cG9ydF9rZXkiOiAiZXhhbXBsZV9hbGdvc2VjX2lzb2xhdGVf
aG9zdF9mcm9tX25ldHdvcmsiLCAidXVpZCI6ICI1YjgwMmE0Mi1mZWU1LTQ4MGYtYTQ5Yy0yMzBi
ZjVjZGNhZmIiLCAiY29udGVudCI6IHsid29ya2Zsb3dfaWQiOiAiZXhhbXBsZV9hbGdvc2VjX2lz
b2xhdGVfaG9zdF9mcm9tX25ldHdvcmsiLCAieG1sIjogIjw/eG1sIHZlcnNpb249XCIxLjBcIiBl
bmNvZGluZz1cIlVURi04XCI/PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93d3cub21nLm9y
Zy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRwOi8vd3d3Lm9t
Zy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRwOi8vd3d3Lm9t
Zy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDovL3d3dy5vbWcu
b3JnL3NwZWMvREQvMjAxMDA1MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRwOi8vcmVzaWxp
ZW50LmlibS5jb20vYnBtblwiIHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1M
U2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5z
dGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3JnL3Rlc3RcIj48
cHJvY2VzcyBpZD1cImV4YW1wbGVfYWxnb3NlY19pc29sYXRlX2hvc3RfZnJvbV9uZXR3b3JrXCIg
aXNFeGVjdXRhYmxlPVwidHJ1ZVwiIG5hbWU9XCJFeGFtcGxlOiBBbGdvU2VjOiBJc29sYXRlIEhv
c3QgRnJvbSBOZXR3b3JrXCI+PGRvY3VtZW50YXRpb24+PCFbQ0RBVEFbQW4gZXhhbXBsZSB3b3Jr
ZmxvdyBzaG93aW5nIGhvdyB0byBpc29sYXRlIFwiSVAgQWRkcmVzc1wiIGFydGlmYWN0IHVzaW5n
IEFsZ29TZWMgRmlyZUZsb3cuIFRoZSBGaXJlRmxvdyBpc29sYXRpb24gcmVxdWVzdCBkZXRhaWxz
IGFyZSB1cGRhdGVkIGluIHRoZSBpbmNpZGVudCdzIERhdGEgVGFibGUgY2FsbGVkIFwiQWxnb1Nl
YyBJc29sYXRpb24gUmVxdWVzdHNcIl1dPjwvZG9jdW1lbnRhdGlvbj48c3RhcnRFdmVudCBpZD1c
IlN0YXJ0RXZlbnRfMTU1YXN4bVwiPjxvdXRnb2luZz5TZXF1ZW5jZUZsb3dfMGZza3ljMzwvb3V0
Z29pbmc+PC9zdGFydEV2ZW50PjxzZXJ2aWNlVGFzayBpZD1cIlNlcnZpY2VUYXNrXzBobWEwMWZc
IiBuYW1lPVwiQWxnb1NlYzogSXNvbGF0ZSBIb3N0IEZyb20gTmV0d29yLi4uXCIgcmVzaWxpZW50
OnR5cGU9XCJmdW5jdGlvblwiPjxleHRlbnNpb25FbGVtZW50cz48cmVzaWxpZW50OmZ1bmN0aW9u
IHV1aWQ9XCJkZjI5NzllZC0wMTc2LTRjOTgtOWQxZS1lMzNmYjllYjY3MGVcIj57XCJpbnB1dHNc
Ijp7fSxcInBvc3RfcHJvY2Vzc2luZ19zY3JpcHRcIjpcIiMjICBFeGFtcGxlOiBBbGdvU2VjOiBJ
c29sYXRlIGhvc3QgZnJvbSBuZXR3b3JrIC0gcG9zdC1wcm9jZXNzaW5nIHNjcmlwdCAjI1xcblxc
biMgRXhhbXBsZSBvZiBleHBlY3RlZCBpc29sYXRpb24gcmVxdWVzdCByZXN1bHRcXG5cXFwiXFxc
IlxcXCJcXG4nZW50cnknOiB7J2hvc3RuYW1lJzogJzEwLjAuMC4xJywgJ3VybCc6ICdodHRwczov
LzE5Mi4xNjguNTguMTI5L0ZpcmVGbG93L1RpY2tldC9EaXNwbGF5Lmh0bWw/aWQ9NTI1Myd9XFxu
XFxcIlxcXCJcXFwiXFxuXFxuIyAgR2xvYmFsc1xcbkVOVFJZX1RPX0RBVEFUQUJMRV9NQVAgPSB7
XFxuICAgXFxcImlkXFxcIjogXFxcImlkXFxcIixcXG4gICBcXFwiaG9zdG5hbWVcXFwiOiBcXFwi
aG9zdG5hbWVcXFwiLFxcbiAgIFxcXCJ1cmxcXFwiOiBcXFwiY2hhbmdlX3JlcXVlc3RfdXJsXFxc
IixcXG59XFxuXFxuIyBQcm9jZXNzaW5nIGlmIHRoZSBmdW5jdGlvbiBpcyBhIHN1Y2Nlc3NcXG4j
IGlmKHJlc3VsdHMuc3VjY2Vzcyk6XFxuZW50cnkgPSByZXN1bHRzXFxuIyBBZGQgUm93XFxucm93
ID0gaW5jaWRlbnQuYWRkUm93KFxcXCJhbGdvc2VjX2lzb2xhdGlvbl9yZXF1ZXN0c1xcXCIpXFxu
XFxuZm9yIGZpZWxkX25hbWUgaW4gRU5UUllfVE9fREFUQVRBQkxFX01BUDpcXG5cXG4gIGlmIGVu
dHJ5LmdldChmaWVsZF9uYW1lKSBpcyBOb25lOlxcbiAgICByb3dbRU5UUllfVE9fREFUQVRBQkxF
X01BUFtmaWVsZF9uYW1lXV0gPSBcXFwiTi9BXFxcIlxcblxcbiAgdHJ5OlxcbiAgICBpZiBmaWVs
ZF9uYW1lID09IFxcXCJpZFxcXCI6XFxuICAgICAgcm93W0VOVFJZX1RPX0RBVEFUQUJMRV9NQVBb
ZmllbGRfbmFtZV1dID0gaW50KGVudHJ5W2ZpZWxkX25hbWVdKVxcbiAgICBlbHNlOlxcbiAgICAg
IHJvd1tFTlRSWV9UT19EQVRBVEFCTEVfTUFQW2ZpZWxkX25hbWVdXSA9IHN0cihlbnRyeVtmaWVs
ZF9uYW1lXSlcXG4gIGV4Y2VwdCBJbmRleEVycm9yOlxcbiAgICByb3dbRU5UUllfVE9fREFUQVRB
QkxFX01BUFtmaWVsZF9uYW1lXV0gPSBcXFwiTi9BXFxcIlwiLFwicHJlX3Byb2Nlc3Npbmdfc2Ny
aXB0XCI6XCJpbnB1dHMuYWxnb3NlY19ob3N0bmFtZSA9IGFydGlmYWN0LnZhbHVlXCIsXCJyZXN1
bHRfbmFtZVwiOlwiXCJ9PC9yZXNpbGllbnQ6ZnVuY3Rpb24+PC9leHRlbnNpb25FbGVtZW50cz48
aW5jb21pbmc+U2VxdWVuY2VGbG93XzBmc2t5YzM8L2luY29taW5nPjxvdXRnb2luZz5TZXF1ZW5j
ZUZsb3dfMTM5eXYwMDwvb3V0Z29pbmc+PC9zZXJ2aWNlVGFzaz48c2VxdWVuY2VGbG93IGlkPVwi
U2VxdWVuY2VGbG93XzBmc2t5YzNcIiBzb3VyY2VSZWY9XCJTdGFydEV2ZW50XzE1NWFzeG1cIiB0
YXJnZXRSZWY9XCJTZXJ2aWNlVGFza18waG1hMDFmXCIvPjxlbmRFdmVudCBpZD1cIkVuZEV2ZW50
XzA1bWIwdGRcIj48aW5jb21pbmc+U2VxdWVuY2VGbG93XzEzOXl2MDA8L2luY29taW5nPjwvZW5k
RXZlbnQ+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18xMzl5djAwXCIgc291cmNlUmVm
PVwiU2VydmljZVRhc2tfMGhtYTAxZlwiIHRhcmdldFJlZj1cIkVuZEV2ZW50XzA1bWIwdGRcIi8+
PHRleHRBbm5vdGF0aW9uIGlkPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwiPjx0ZXh0PlN0YXJ0
IHlvdXIgd29ya2Zsb3cgaGVyZTwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lhdGlvbiBp
ZD1cIkFzc29jaWF0aW9uXzFzZXVqNDhcIiBzb3VyY2VSZWY9XCJTdGFydEV2ZW50XzE1NWFzeG1c
IiB0YXJnZXRSZWY9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIvPjwvcHJvY2Vzcz48YnBtbmRp
OkJQTU5EaWFncmFtIGlkPVwiQlBNTkRpYWdyYW1fMVwiPjxicG1uZGk6QlBNTlBsYW5lIGJwbW5F
bGVtZW50PVwidW5kZWZpbmVkXCIgaWQ9XCJCUE1OUGxhbmVfMVwiPjxicG1uZGk6QlBNTlNoYXBl
IGJwbW5FbGVtZW50PVwiU3RhcnRFdmVudF8xNTVhc3htXCIgaWQ9XCJTdGFydEV2ZW50XzE1NWFz
eG1fZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjM2XCIgd2lkdGg9XCIzNlwiIHg9XCIxNjJc
IiB5PVwiMTg4XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMFwi
IHdpZHRoPVwiOTBcIiB4PVwiMTU3XCIgeT1cIjIyM1wiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9i
cG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiVGV4dEFubm90
YXRpb25fMWt4eGl5dFwiIGlkPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dF9kaVwiPjxvbWdkYzpC
b3VuZHMgaGVpZ2h0PVwiMzBcIiB3aWR0aD1cIjEwMFwiIHg9XCI5OVwiIHk9XCIyNTRcIi8+PC9i
cG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJBc3NvY2lhdGlv
bl8xc2V1ajQ4XCIgaWQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4X2RpXCI+PG9tZ2RpOndheXBvaW50
IHg9XCIxNjlcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIyMFwiLz48b21nZGk6d2F5
cG9pbnQgeD1cIjE1M1wiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjU0XCIvPjwvYnBt
bmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiU2VydmljZVRhc2tf
MGhtYTAxZlwiIGlkPVwiU2VydmljZVRhc2tfMGhtYTAxZl9kaVwiPjxvbWdkYzpCb3VuZHMgaGVp
Z2h0PVwiODBcIiB3aWR0aD1cIjEwMFwiIHg9XCIyNDYuNDA4MzUyNjY4MjEzNDdcIiB5PVwiMTY1
LjY0NzMzMTc4NjU0MjlcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBt
bkVsZW1lbnQ9XCJTZXF1ZW5jZUZsb3dfMGZza3ljM1wiIGlkPVwiU2VxdWVuY2VGbG93XzBmc2t5
YzNfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjE5OFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRc
IiB5PVwiMjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiMjQ2XCIgeHNpOnR5cGU9XCJvbWdkYzpQ
b2ludFwiIHk9XCIyMDZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9
XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCIyMjJcIiB5PVwiMTg0LjVcIi8+PC9icG1uZGk6QlBNTkxh
YmVsPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiRW5k
RXZlbnRfMDVtYjB0ZFwiIGlkPVwiRW5kRXZlbnRfMDVtYjB0ZF9kaVwiPjxvbWdkYzpCb3VuZHMg
aGVpZ2h0PVwiMzZcIiB3aWR0aD1cIjM2XCIgeD1cIjM4Ny4xMjExNjA0MDk1NTYzXCIgeT1cIjE4
OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9
XCIwXCIgeD1cIjQwNS4xMjExNjA0MDk1NTYzXCIgeT1cIjIyN1wiLz48L2JwbW5kaTpCUE1OTGFi
ZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJTZXF1
ZW5jZUZsb3dfMTM5eXYwMFwiIGlkPVwiU2VxdWVuY2VGbG93XzEzOXl2MDBfZGlcIj48b21nZGk6
d2F5cG9pbnQgeD1cIjM0NlwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxv
bWdkaTp3YXlwb2ludCB4PVwiMzg3XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZc
Ii8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwi
MFwiIHg9XCIzNjYuNVwiIHk9XCIxODRcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQ
TU5FZGdlPjwvYnBtbmRpOkJQTU5QbGFuZT48L2JwbW5kaTpCUE1ORGlhZ3JhbT48L2RlZmluaXRp
b25zPiIsICJ2ZXJzaW9uIjogMTJ9LCAiYWN0aW9ucyI6IFtdfV0sICJyb2xlcyI6IFtdLCAid29y
a3NwYWNlcyI6IFtdLCAiZnVuY3Rpb25zIjogW3siaWQiOiAzNTYsICJuYW1lIjogImFsZ29zZWNf
aXNvbGF0ZV9ob3N0X2Zyb21fbmV0d29yayIsICJkaXNwbGF5X25hbWUiOiAiQWxnb1NlYzogSXNv
bGF0ZSBIb3N0IEZyb20gTmV0d29yayIsICJkZXNjcmlwdGlvbiI6IHsiZm9ybWF0IjogInRleHQi
LCAiY29udGVudCI6ICJDcmVhdGUgYSB0cmFmZmljIGNoYW5nZSByZXF1ZXN0IHdpdGggQWxnb1Nl
YydzIEZpcmVGbG93IHRvIGlzb2xhdGUgYSBob3N0IGZyb20gdGhlIG5ldHdvcmsuIFRoZW4gQWxn
b1NlYydzIEFjdGl2ZUNoYW5nZSB0aGVuIGF1dG9tYXRpY2FsbHkgaW1wbGVtZW50cyBydWxlIGNo
YW5nZXMgYWNyb3NzIGFsbCBmaXJld2FsbHMgaW4gdGhlIG5ldHdvcmsgdG8gaXNvbGF0ZSB0aGUg
aG9zdCBjb21wbGV0ZWx5LiJ9LCAiZGVzdGluYXRpb25faGFuZGxlIjogImFsZ29zZWMiLCAiZXhw
b3J0X2tleSI6ICJhbGdvc2VjX2lzb2xhdGVfaG9zdF9mcm9tX25ldHdvcmsiLCAidXVpZCI6ICJk
ZjI5NzllZC0wMTc2LTRjOTgtOWQxZS1lMzNmYjllYjY3MGUiLCAidmVyc2lvbiI6IDIsICJjcmVh
dG9yIjogeyJpZCI6IDk0LCAidHlwZSI6ICJ1c2VyIiwgIm5hbWUiOiAiYWxtb2cuY29oZW5AYWxn
b3NlYy5jb20iLCAiZGlzcGxheV9uYW1lIjogIkFsbW9nIENvaGVuIn0sICJsYXN0X21vZGlmaWVk
X2J5IjogeyJpZCI6IDk0LCAidHlwZSI6ICJ1c2VyIiwgIm5hbWUiOiAiYWxtb2cuY29oZW5AYWxn
b3NlYy5jb20iLCAiZGlzcGxheV9uYW1lIjogIkFsbW9nIENvaGVuIn0sICJsYXN0X21vZGlmaWVk
X3RpbWUiOiAxNTQyNzQ1MjY0MzcyLCAidmlld19pdGVtcyI6IFt7InN0ZXBfbGFiZWwiOiBudWxs
LCAic2hvd19pZiI6IG51bGwsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiZmllbGRfdHlwZSI6
ICJfX2Z1bmN0aW9uIiwgImNvbnRlbnQiOiAiZmQ5YjM2NTAtZjc5Zi00ODYyLThmMGQtYTNkZmVj
YTE2NjBmIiwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZX1dLCAid29ya2Zsb3dzIjogW3sid29y
a2Zsb3dfaWQiOiAyNzksICJuYW1lIjogIkV4YW1wbGU6IEFsZ29TZWM6IElzb2xhdGUgSG9zdCBG
cm9tIE5ldHdvcmsiLCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZXhhbXBsZV9hbGdvc2VjX2lzb2xh
dGVfaG9zdF9mcm9tX25ldHdvcmsiLCAib2JqZWN0X3R5cGUiOiAiYXJ0aWZhY3QiLCAiZGVzY3Jp
cHRpb24iOiBudWxsLCAidXVpZCI6IG51bGwsICJhY3Rpb25zIjogW119XX1dfQ==
"""
    )